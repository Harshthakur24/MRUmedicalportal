generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

enum School {
    ENGINEERING
    LAW
    SCIENCE
    EDUCATION_AND_HUMANITIES
    MANAGEMENT_AND_COMMERCE
}

model User {
    id                   String          @id @default(cuid())
    name                 String
    email                String          @unique
    password             String
    role                 Role            @default(STUDENT)
    rollNumber           String          @unique
    department           School
    class                String
    year                 Int
    createdAt            DateTime        @default(now())
    updatedAt            DateTime        @updatedAt
    resetPasswordToken   String?
    verificationToken    String?
    emailVerified        DateTime?
    resetPasswordExpires DateTime?
    submittedReports     MedicalReport[] @relation("SubmittedReports")
    reviewedReports      MedicalReport[] @relation("ReviewedReports")

    @@index([email])
    @@index([rollNumber])
}

model MedicalReport {
    id                 String       @id @default(cuid())
    studentId          String
    student            User         @relation("SubmittedReports", fields: [studentId], references: [id], onDelete: Cascade)
    studentName        String
    rollNumber         String
    dateOfAbsence      DateTime
    dateTo             DateTime
    reason             String
    doctorName         String
    doctorAddress      String
    medicalCertificate String
    status             ReportStatus @default(PENDING)
    otherReports       String[]
    parentName         String
    parentContact      String
    studentContact     String
    className          String
    disease            String
    workingDays        Int
    t1Reexam           Boolean      @default(false)
    t1Subjects         String?
    t2Reexam           Boolean      @default(false)
    t2Subjects         String?
    submissionDate     DateTime     @default(now())
    reviewerId         String?
    reviewer           User?        @relation("ReviewedReports", fields: [reviewerId], references: [id], onDelete: SetNull)
    createdAt          DateTime     @default(now())
    updatedAt          DateTime     @updatedAt
    reviewComment      String?
    reviewedAt         DateTime?
    department         School

    @@index([studentId])
    @@index([reviewerId])
    @@index([status])
}

enum Role {
    ADMIN
    HOD
    PROGRAM_COORDINATOR
    STUDENT
}

enum ReportStatus {
    APPROVED
    PENDING
    REJECTED
}
