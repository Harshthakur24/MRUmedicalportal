generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String
  email         String    @unique
  emailVerified DateTime?
  password      String
  role          String    @default("STUDENT")
  rollNumber    String?   @unique
  department    String?
  year          Int?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  // Relations
  submissions     MedicalReport[] @relation("Submissions")
  reviewedReports MedicalReport[] @relation("ReviewedBy")
}

model MedicalReport {
  id        String   @id @default(cuid())
  studentId String
  student   User     @relation("Submissions", fields: [studentId], references: [id])
  student2  student? @relation(fields: [studentId], references: [id], map: "MedicalReport_studentId_Student_fkey")

  // Student Details
  name          String
  parentName    String
  rollNumber    String?
  class         String
  section       String
  disease       String
  doctorName    String
  doctorAddress String

  // Dates and Duration
  dateFrom    DateTime
  dateTo      DateTime
  workingDays Int

  // Re-exam Details
  t1Reexam   Boolean @default(false)
  t1Subjects String?
  t2Reexam   Boolean @default(false)
  t2Subjects String?

  // Documents
  medicalCertificate String // URL to stored file
  opdIpdSlip         String? // URL to stored file
  dischargeSlip      String? // URL to stored file
  otherReports       String[] // URLs to stored files

  // Contact Information
  studentContact String
  parentContact  String

  // Status and Review
  status     Status  @default(PENDING)
  comments   String?
  reviewerId String?
  reviewer   User?   @relation("ReviewedBy", fields: [reviewerId], references: [id])

  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  PCChecklist PCChecklist?
}

model PCChecklist {
  id              String        @id @default(cuid())
  medicalReport   MedicalReport @relation(fields: [medicalReportId], references: [id])
  medicalReportId String        @unique

  hasApplication        Boolean
  hasMedicalCertificate Boolean
  hasOpdIpdSlip         Boolean
  hasDischargeSlip      Boolean
  otherDocuments        String?
}

enum Role {
  ADMIN
  HOD
  STUDENT
}

enum Status {
  PENDING
  APPROVED
  REJECTED
}

enum DeanApproval {
  REEXAM
  ATTENDANCE
  BOTH
  REJECTED
}

model student {
  id         String          @id @default(cuid())
  name       String
  rollNumber String          @unique
  class      String
  semester   String
  email      String
  reports    MedicalReport[]
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
}
